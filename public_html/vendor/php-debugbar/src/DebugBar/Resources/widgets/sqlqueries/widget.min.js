
(function(c){var b=PhpDebugBar.utils.makecsscls("phpdebugbar-widgets-");var a=PhpDebugBar.Widgets.SQLQueriesWidget=PhpDebugBar.Widget.extend({className:b("sqlqueries"),onFilterClick:function(e){c(e).toggleClass(b("excluded"));var d=[];this.$toolbar.find(b(".filter")+b(".excluded")).each(function(){d.push(this.rel)});this.$list.$el.find("li[connection="+c(e).attr("rel")+"]").toggle();this.set("exclude",d)},render:function(){this.$status=c("<div />").addClass(b("status")).appendTo(this.$el);this.$toolbar=c("<div></div>").addClass(b("toolbar")).appendTo(this.$el);var e=[],d=this;this.$list=new PhpDebugBar.Widgets.ListWidget({itemRenderer:function(f,j){c("<code />").addClass(b("sql")).html(PhpDebugBar.Widgets.highlight(j.sql,"sql")).appendTo(f);if(j.duration_str){c('<span title="Duration" />').addClass(b("duration")).text(j.duration_str).appendTo(f)}if(j.memory_str){c('<span title="Memory usage" />').addClass(b("memory")).text(j.memory_str).appendTo(f)}if(typeof(j.row_count)!="undefined"){c('<span title="Row count" />').addClass(b("row-count")).text(j.row_count).appendTo(f)}if(typeof(j.stmt_id)!="undefined"&&j.stmt_id){c('<span title="Prepared statement ID" />').addClass(b("stmt-id")).text(j.stmt_id).appendTo(f)}if(j.connection){c('<span title="Connect type: '+j.connectType+" | Database name: "+j.dbName+" | Driver name: "+j.driverName+'" />').addClass(b("database")).text(j.connection).appendTo(f);f.attr("connection",j.connection);if(c.inArray(j.connection,e)==-1){e.push(j.connection);c("<a />").addClass(b("filter")).text(j.connection).attr("rel",j.connection).on("click",function(){d.onFilterClick(this)}).appendTo(d.$toolbar);if(e.length>1){d.$toolbar.show();d.$list.$el.css("margin-bottom","20px")}}}if(typeof(j.is_success)!="undefined"&&!j.is_success){f.addClass(b("error"));f.append(c("<span />").addClass(b("error")).text("["+j.error_code+"] "+j.error_message))}var g=false;var i=c('<table><tr><th colspan="2">Params</th></tr></table>');var k=c("<table><tr><th>BackTrace</th></tr></table>");if(j.params&&!c.isEmptyObject(j.params)){i.addClass(b("params")).appendTo(f);for(var h in j.params){if(typeof j.params[h]!=="function"){i.append('<tr><td class="'+b("name")+'">'+h+'</td><td class="'+b("value")+'">'+j.params[h]+"</td></tr>")}}g=true}if(j.backtrace&&!c.isEmptyObject(j.backtrace)){k.addClass(b("params")).appendTo(f);k.append('<tr><td class="'+b("name")+'">'+j.backtrace+"</td></tr>");g=true}if(g){f.css("cursor","pointer").click(function(){if(i.is(":visible")){i.hide()}else{i.show()}if(k.is(":visible")){k.hide()}else{k.show()}})}}});this.$list.$el.appendTo(this.$el);this.bindAttr("data",function(j){this.$list.set("data",j.statements);this.$status.empty();if(j.length===0){return}for(var l={},k=0,g=0;g<j.statements.length;g++){var h=j.statements[g].sql;if(j.statements[g].params&&!c.isEmptyObject(j.statements[g].params)){h+=" {"+c.param(j.statements[g].params,false)+"}"}l[h]=l[h]||{keys:[]};l[h].keys.push(g)}for(var h in l){if(l[h].keys.length>1){k++;for(var g=0;g<l[h].keys.length;g++){this.$list.$el.find("."+b("list-item")).eq(l[h].keys[g]).addClass(b("sql-duplicate")).addClass(b("sql-duplicate-"+k))}}}var f=c("<span />").text(j.nb_statements+" statements were executed").appendTo(this.$status);if(j.nb_failed_statements){f.append(", "+j.nb_failed_statements+" of which failed")}if(k){f.append(", "+k+" of which were duplicated")}if(j.accumulated_duration_str){this.$status.append(c('<span title="Accumulated duration" />').addClass(b("duration")).text(j.accumulated_duration_str))}if(j.memory_usage_str){this.$status.append(c('<span title="Memory usage" />').addClass(b("memory")).text(j.memory_usage_str))}})}})})(PhpDebugBar.$);